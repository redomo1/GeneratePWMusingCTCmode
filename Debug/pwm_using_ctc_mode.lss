
pwm_using_ctc_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002f40  00002fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00002fdc  2**0
                  ALLOC
  3 .stab         000030b4  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001524  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b148  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b535  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_6>
      1c:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__vector_7>
      20:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_8>
      24:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_9>
      28:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_10>
      2c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e4       	ldi	r30, 0x40	; 64
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <main>
      8a:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_VidInit>:
void (*TIMER0_CallBack)(void);
void (*TIMER1_CallBack)(void);
void (*TIMER1_CallBack_OV)(void);
/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8c 93       	st	X, r24
	/*Mode Select*/
#if TIMER0_SET_MODE == TIMER0_NORMAL_MODE
	CLR_BIT(TCCR0,6);
     b68:	a3 e5       	ldi	r26, 0x53	; 83
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e3 e5       	ldi	r30, 0x53	; 83
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7b       	andi	r24, 0xBF	; 191
     b74:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     b76:	a3 e5       	ldi	r26, 0x53	; 83
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e3 e5       	ldi	r30, 0x53	; 83
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	87 7f       	andi	r24, 0xF7	; 247
     b82:	8c 93       	st	X, r24
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,0);
     b84:	a9 e5       	ldi	r26, 0x59	; 89
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e9 e5       	ldi	r30, 0x59	; 89
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
     ba4:	e2 e5       	ldi	r30, 0x52	; 82
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	80 83       	st	Z, r24
}
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	0f 92       	push	r0
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
     bc0:	ec e5       	ldi	r30, 0x5C	; 92
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	80 83       	st	Z, r24
}
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <TIMER0_VidOVF_SetCallBack+0x6>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	90 93 6d 00 	sts	0x006D, r25
     be6:	80 93 6c 00 	sts	0x006C, r24
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <TIMER0_VidCTC_SetCallBack>:

void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <TIMER0_VidCTC_SetCallBack+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	90 93 6d 00 	sts	0x006D, r25
     c0a:	80 93 6c 00 	sts	0x006C, r24
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c42:	e0 91 6c 00 	lds	r30, 0x006C
     c46:	f0 91 6d 00 	lds	r31, 0x006D
     c4a:	09 95       	icall
}
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c9c:	e0 91 6c 00 	lds	r30, 0x006C
     ca0:	f0 91 6d 00 	lds	r31, 0x006D
     ca4:	09 95       	icall
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <TIMER1_VidInit>:
void TIMER1_VidInit(void)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
		TCCR1B&=0xF8;
     cd4:	ae e4       	ldi	r26, 0x4E	; 78
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ee e4       	ldi	r30, 0x4E	; 78
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	88 7f       	andi	r24, 0xF8	; 248
     ce0:	8c 93       	st	X, r24
		TCCR1B|=TIMER1_SET_PRESCALER;
     ce2:	ae e4       	ldi	r26, 0x4E	; 78
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	8c 93       	st	X, r24
#endif
#else
#error "TIMER1 Channel Mode is not valid.. "
#endif
#elif TIMER1_SET_MODE == TIMER1_CTC_MODE_WITH_OCR1A
	 CLR_BIT(TCCR1A,0);
     cf0:	af e4       	ldi	r26, 0x4F	; 79
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ef e4       	ldi	r30, 0x4F	; 79
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 7f       	andi	r24, 0xFE	; 254
     cfc:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,1);
     cfe:	af e4       	ldi	r26, 0x4F	; 79
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ef e4       	ldi	r30, 0x4F	; 79
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,3);
     d0c:	ae e4       	ldi	r26, 0x4E	; 78
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ee e4       	ldi	r30, 0x4E	; 78
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 60       	ori	r24, 0x08	; 8
     d18:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,4);
     d1a:	ae e4       	ldi	r26, 0x4E	; 78
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ee e4       	ldi	r30, 0x4E	; 78
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7e       	andi	r24, 0xEF	; 239
     d26:	8c 93       	st	X, r24
#if CHANNEL_MODE == CHANNELA
#if TIMER1_SET_CTC_INTERRUPT == TIMER1_CTC_INTERRUPT_ENABLED
	SET_BIT(TIMSK,4);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,4);
#else
#error "TIMER1 CTC Interrupt Mode is not valid..."
#endif
#if TIMER1_SET_OC1A_OR_OC1B_PIN_MODE == TIMER1_OC1A_OR_OC1B_PIN_DISCONNECTED
	   CLR_BIT(TCCR1A,6);
     d36:	af e4       	ldi	r26, 0x4F	; 79
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ef e4       	ldi	r30, 0x4F	; 79
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7b       	andi	r24, 0xBF	; 191
     d42:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,7);
     d44:	af e4       	ldi	r26, 0x4F	; 79
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ef e4       	ldi	r30, 0x4F	; 79
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 77       	andi	r24, 0x7F	; 127
     d50:	8c 93       	st	X, r24
#endif
#else
#error "TIMER1 Mode is not valid..."
#endif

}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <TIMER1_VidSetPreload>:
/*Set Preload Function*/
void TIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <TIMER1_VidSetPreload+0x6>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Preload;
     d66:	ec e4       	ldi	r30, 0x4C	; 76
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <TIMER1_VidSetTopValue>:
void TIMER1_VidSetTopValue(u16 Copy_u16TopValue)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <TIMER1_VidSetTopValue+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
     d8a:	e6 e4       	ldi	r30, 0x46	; 70
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24

}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <TIMER1_VidSetCTCValueCHA>:
void TIMER1_VidSetCTCValueCHA(u16 Copy_u16CTCValue)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <TIMER1_VidSetCTCValueCHA+0x6>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =  Copy_u16CTCValue;
     dae:	ea e4       	ldi	r30, 0x4A	; 74
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24

}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <TIMER1_VidSetCTCValueCHB>:
void TIMER1_VidSetCTCValueCHB(u16 Copy_u16CTCValue)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <TIMER1_VidSetCTCValueCHB+0x6>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	OCR1B =  Copy_u16CTCValue;
     dd2:	e8 e4       	ldi	r30, 0x48	; 72
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24

}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <TIMER1_VidICUInit>:
void TIMER1_VidICUInit(void)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
#if ICU_Edge_Select == RISING_EDGE
	/*ICU Edge Select-->Rising edge*/
	SET_BIT(TCCR1B,6);
     df0:	ae e4       	ldi	r26, 0x4E	; 78
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ee e4       	ldi	r30, 0x4E	; 78
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 64       	ori	r24, 0x40	; 64
     dfc:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     dfe:	a9 e5       	ldi	r26, 0x59	; 89
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e9 e5       	ldi	r30, 0x59	; 89
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	84 60       	ori	r24, 0x04	; 4
     e0a:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     e0c:	a9 e5       	ldi	r26, 0x59	; 89
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e9 e5       	ldi	r30, 0x59	; 89
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 62       	ori	r24, 0x20	; 32
     e18:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
#else
#error"ICU Edge Select is not valid...."
#endif
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <__vector_9>:
/* TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack_OV();
     e4a:	e0 91 6a 00 	lds	r30, 0x006A
     e4e:	f0 91 6b 00 	lds	r31, 0x006B
     e52:	09 95       	icall
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_6>:
/* TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62

}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <__vector_7>:
/* TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
     ec4:	e0 91 6e 00 	lds	r30, 0x006E
     ec8:	f0 91 6f 00 	lds	r31, 0x006F
     ecc:	09 95       	icall
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_8>:
/*  TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	//TIMER1_CallBack();
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <TIMER_VidCompute_Freq_And_Duty>:
void TIMER_VidCompute_Freq_And_Duty(u32 *Copy_u32Freq,u8 *Copy_u8DutyCycle,u16 T1,u16 T2,u16 T3)
{
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	2a 97       	sbiw	r28, 0x0a	; 10
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	7c 83       	std	Y+4, r23	; 0x04
     f32:	6b 83       	std	Y+3, r22	; 0x03
     f34:	5e 83       	std	Y+6, r21	; 0x06
     f36:	4d 83       	std	Y+5, r20	; 0x05
     f38:	38 87       	std	Y+8, r19	; 0x08
     f3a:	2f 83       	std	Y+7, r18	; 0x07
     f3c:	1a 87       	std	Y+10, r17	; 0x0a
     f3e:	09 87       	std	Y+9, r16	; 0x09

		*Copy_u32Freq = (1000000UL/(T3-T1));
     f40:	29 85       	ldd	r18, Y+9	; 0x09
     f42:	3a 85       	ldd	r19, Y+10	; 0x0a
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	a9 01       	movw	r20, r18
     f4a:	48 1b       	sub	r20, r24
     f4c:	59 0b       	sbc	r21, r25
     f4e:	ca 01       	movw	r24, r20
     f50:	9c 01       	movw	r18, r24
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	80 e4       	ldi	r24, 0x40	; 64
     f58:	92 e4       	ldi	r25, 0x42	; 66
     f5a:	af e0       	ldi	r26, 0x0F	; 15
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__udivmodsi4>
     f66:	da 01       	movw	r26, r20
     f68:	c9 01       	movw	r24, r18
     f6a:	e9 81       	ldd	r30, Y+1	; 0x01
     f6c:	fa 81       	ldd	r31, Y+2	; 0x02
     f6e:	80 83       	st	Z, r24
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	a2 83       	std	Z+2, r26	; 0x02
     f74:	b3 83       	std	Z+3, r27	; 0x03
		*Copy_u8DutyCycle = ((T2-T1)*100)/(T3-T1);
     f76:	2f 81       	ldd	r18, Y+7	; 0x07
     f78:	38 85       	ldd	r19, Y+8	; 0x08
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	28 1b       	sub	r18, r24
     f80:	39 0b       	sbc	r19, r25
     f82:	84 e6       	ldi	r24, 0x64	; 100
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	28 9f       	mul	r18, r24
     f88:	a0 01       	movw	r20, r0
     f8a:	29 9f       	mul	r18, r25
     f8c:	50 0d       	add	r21, r0
     f8e:	38 9f       	mul	r19, r24
     f90:	50 0d       	add	r21, r0
     f92:	11 24       	eor	r1, r1
     f94:	29 85       	ldd	r18, Y+9	; 0x09
     f96:	3a 85       	ldd	r19, Y+10	; 0x0a
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	28 1b       	sub	r18, r24
     f9e:	39 0b       	sbc	r19, r25
     fa0:	ca 01       	movw	r24, r20
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__udivmodhi4>
     fa8:	cb 01       	movw	r24, r22
     faa:	eb 81       	ldd	r30, Y+3	; 0x03
     fac:	fc 81       	ldd	r31, Y+4	; 0x04
     fae:	80 83       	st	Z, r24

}
     fb0:	2a 96       	adiw	r28, 0x0a	; 10
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <TIMER0_TCNT0_VALUE>:
u8 TIMER0_TCNT0_VALUE(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	return(TCNT0);
     fce:	e2 e5       	ldi	r30, 0x52	; 82
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <TIMER1_TCNT1_VALUE>:
u16 TIMER1_TCNT1_VALUE(void)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	return(TCNT1);
     fe2:	ec e4       	ldi	r30, 0x4C	; 76
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TIMER1_VidOVF_SetCallBack>:
void TIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <TIMER1_VidOVF_SetCallBack+0x6>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack_OV=Copy_VidCallBack;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	90 93 6b 00 	sts	0x006B, r25
    1006:	80 93 6a 00 	sts	0x006A, r24
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TIMER1_VidCTC_SetCallBack>:

void TIMER1_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <TIMER1_VidCTC_SetCallBack+0x6>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack=Copy_VidCallBack;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	90 93 6f 00 	sts	0x006F, r25
    102a:	80 93 6e 00 	sts	0x006E, r24
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1040:	af e5       	ldi	r26, 0x5F	; 95
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e5       	ldi	r30, 0x5F	; 95
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    105c:	af e5       	ldi	r26, 0x5F	; 95
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ef e5       	ldi	r30, 0x5F	; 95
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	8c 93       	st	X, r24
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <MEXTI0_VidInit>:



/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,0);
    1078:	a5 e5       	ldi	r26, 0x55	; 85
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e5       	ldi	r30, 0x55	; 85
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	81 60       	ori	r24, 0x01	; 1
    1084:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    1086:	a5 e5       	ldi	r26, 0x55	; 85
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e5       	ldi	r30, 0x55	; 85
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	8c 93       	st	X, r24
#else
#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    1094:	ab e5       	ldi	r26, 0x5B	; 91
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e5       	ldi	r30, 0x5B	; 91
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	80 64       	ori	r24, 0x40	; 64
    10a0:	8c 93       	st	X, r24
}
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,2);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 60       	ori	r24, 0x08	; 8
    10ca:	8c 93       	st	X, r24
#else
#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    10cc:	ab e5       	ldi	r26, 0x5B	; 91
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	eb e5       	ldi	r30, 0x5B	; 91
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_RISING_EDGE
	SET_BIT(MCUCSR,6);
    10e8:	a4 e5       	ldi	r26, 0x54	; 84
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e4 e5       	ldi	r30, 0x54	; 84
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8c 93       	st	X, r24
#else
#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    10f6:	ab e5       	ldi	r26, 0x5B	; 91
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e5       	ldi	r30, 0x5B	; 91
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	8c 93       	st	X, r24
}
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <MEXTI_VidSenseControl+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <MEXTI_VidSenseControl+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3c 83       	std	Y+4, r19	; 0x04
    1122:	2b 83       	std	Y+3, r18	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <MEXTI_VidSenseControl+0x26>
    112e:	54 c0       	rjmp	.+168    	; 0x11d8 <MEXTI_VidSenseControl+0xce>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <MEXTI_VidSenseControl+0x32>
    113a:	96 c0       	rjmp	.+300    	; 0x1268 <MEXTI_VidSenseControl+0x15e>
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	09 f0       	breq	.+2      	; 0x1146 <MEXTI_VidSenseControl+0x3c>
    1144:	a6 c0       	rjmp	.+332    	; 0x1292 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	88 23       	and	r24, r24
    114a:	79 f4       	brne	.+30     	; 0x116a <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    114c:	a5 e5       	ldi	r26, 0x55	; 85
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e5 e5       	ldi	r30, 0x55	; 85
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8d 7f       	andi	r24, 0xFD	; 253
    1166:	8c 93       	st	X, r24
    1168:	94 c0       	rjmp	.+296    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	79 f4       	brne	.+30     	; 0x118e <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    1170:	a5 e5       	ldi	r26, 0x55	; 85
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e5       	ldi	r30, 0x55	; 85
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    117e:	a5 e5       	ldi	r26, 0x55	; 85
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e5       	ldi	r30, 0x55	; 85
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8d 7f       	andi	r24, 0xFD	; 253
    118a:	8c 93       	st	X, r24
    118c:	82 c0       	rjmp	.+260    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	79 f4       	brne	.+30     	; 0x11b2 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8e 7f       	andi	r24, 0xFE	; 254
    11a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	8c 93       	st	X, r24
    11b0:	70 c0       	rjmp	.+224    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	09 f0       	breq	.+2      	; 0x11ba <MEXTI_VidSenseControl+0xb0>
    11b8:	6c c0       	rjmp	.+216    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    11ba:	a5 e5       	ldi	r26, 0x55	; 85
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e5 e5       	ldi	r30, 0x55	; 85
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    11c8:	a5 e5       	ldi	r26, 0x55	; 85
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e5 e5       	ldi	r30, 0x55	; 85
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	8c 93       	st	X, r24
    11d6:	5d c0       	rjmp	.+186    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	88 23       	and	r24, r24
    11dc:	79 f4       	brne	.+30     	; 0x11fc <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    11de:	a5 e5       	ldi	r26, 0x55	; 85
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e5       	ldi	r30, 0x55	; 85
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8b 7f       	andi	r24, 0xFB	; 251
    11ea:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    11ec:	a5 e5       	ldi	r26, 0x55	; 85
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e5       	ldi	r30, 0x55	; 85
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	87 7f       	andi	r24, 0xF7	; 247
    11f8:	8c 93       	st	X, r24
    11fa:	4b c0       	rjmp	.+150    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	79 f4       	brne	.+30     	; 0x1220 <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	87 7f       	andi	r24, 0xF7	; 247
    121c:	8c 93       	st	X, r24
    121e:	39 c0       	rjmp	.+114    	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	79 f4       	brne	.+30     	; 0x1244 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    1226:	a5 e5       	ldi	r26, 0x55	; 85
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8b 7f       	andi	r24, 0xFB	; 251
    1232:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1234:	a5 e5       	ldi	r26, 0x55	; 85
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e5       	ldi	r30, 0x55	; 85
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	88 60       	ori	r24, 0x08	; 8
    1240:	8c 93       	st	X, r24
    1242:	27 c0       	rjmp	.+78     	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	21 f5       	brne	.+72     	; 0x1292 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    124a:	a5 e5       	ldi	r26, 0x55	; 85
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 60       	ori	r24, 0x08	; 8
    1264:	8c 93       	st	X, r24
    1266:	15 c0       	rjmp	.+42     	; 0x1292 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	41 f4       	brne	.+16     	; 0x127e <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    126e:	a4 e5       	ldi	r26, 0x54	; 84
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e4 e5       	ldi	r30, 0x54	; 84
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	8c 93       	st	X, r24
    127c:	0a c0       	rjmp	.+20     	; 0x1292 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	39 f4       	brne	.+14     	; 0x1292 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    1284:	a4 e5       	ldi	r26, 0x54	; 84
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e4 e5       	ldi	r30, 0x54	; 84
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <EXTI0_SET_CALLBACKFUNCTION>:
void EXTI0_SET_CALLBACKFUNCTION(void(*CALL_BACKFUNCTION)(void))
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <EXTI0_SET_CALLBACKFUNCTION+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9a 83       	std	Y+2, r25	; 0x02
    12ac:	89 83       	std	Y+1, r24	; 0x01
	COPY_COLL_BACK = CALL_BACKFUNCTION;
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	90 93 71 00 	sts	0x0071, r25
    12b6:	80 93 70 00 	sts	0x0070, r24



}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <__vector_1>:

void __vector_1(void)       __attribute__((signal));
void __vector_1(void)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	COPY_COLL_BACK();
    12ee:	e0 91 70 00 	lds	r30, 0x0070
    12f2:	f0 91 71 00 	lds	r31, 0x0071
    12f6:	09 95       	icall
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	ff 91       	pop	r31
    12fe:	ef 91       	pop	r30
    1300:	bf 91       	pop	r27
    1302:	af 91       	pop	r26
    1304:	9f 91       	pop	r25
    1306:	8f 91       	pop	r24
    1308:	7f 91       	pop	r23
    130a:	6f 91       	pop	r22
    130c:	5f 91       	pop	r21
    130e:	4f 91       	pop	r20
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <MDIO_Error_State_SetPinDirection+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <MDIO_Error_State_SetPinDirection+0x8>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <MDIO_Error_State_SetPinDirection+0xa>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	6b 83       	std	Y+3, r22	; 0x03
    1330:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <MDIO_Error_State_SetPinDirection+0x20>
    133c:	e8 c0       	rjmp	.+464    	; 0x150e <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3e 83       	std	Y+6, r19	; 0x06
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <MDIO_Error_State_SetPinDirection+0x36>
    1352:	48 c0       	rjmp	.+144    	; 0x13e4 <MDIO_Error_State_SetPinDirection+0xc6>
    1354:	2d 81       	ldd	r18, Y+5	; 0x05
    1356:	3e 81       	ldd	r19, Y+6	; 0x06
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <MDIO_Error_State_SetPinDirection+0x4a>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <MDIO_Error_State_SetPinDirection+0x64>
    1366:	d1 c0       	rjmp	.+418    	; 0x150a <MDIO_Error_State_SetPinDirection+0x1ec>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <MDIO_Error_State_SetPinDirection+0x56>
    1372:	69 c0       	rjmp	.+210    	; 0x1446 <MDIO_Error_State_SetPinDirection+0x128>
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <MDIO_Error_State_SetPinDirection+0x62>
    137e:	94 c0       	rjmp	.+296    	; 0x14a8 <MDIO_Error_State_SetPinDirection+0x18a>
    1380:	c4 c0       	rjmp	.+392    	; 0x150a <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <MDIO_Error_State_SetPinDirection+0x88>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <MDIO_Error_State_SetPinDirection+0x84>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	b0 c0       	rjmp	.+352    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	88 23       	and	r24, r24
    13b4:	a9 f4       	brne	.+42     	; 0x13e0 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    13b6:	aa e3       	ldi	r26, 0x3A	; 58
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <MDIO_Error_State_SetPinDirection+0xb6>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <MDIO_Error_State_SetPinDirection+0xb2>
    13d8:	80 95       	com	r24
    13da:	84 23       	and	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	98 c0       	rjmp	.+304    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    13e0:	19 82       	std	Y+1, r1	; 0x01
    13e2:	96 c0       	rjmp	.+300    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a1 f4       	brne	.+40     	; 0x1412 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    13ea:	a7 e3       	ldi	r26, 0x37	; 55
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e7 e3       	ldi	r30, 0x37	; 55
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <MDIO_Error_State_SetPinDirection+0xea>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <MDIO_Error_State_SetPinDirection+0xe6>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	7f c0       	rjmp	.+254    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 23       	and	r24, r24
    1416:	a9 f4       	brne	.+42     	; 0x1442 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_Error_State_SetPinDirection+0x118>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_Error_State_SetPinDirection+0x114>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	67 c0       	rjmp	.+206    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	65 c0       	rjmp	.+202    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	a1 f4       	brne	.+40     	; 0x1474 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    144c:	a4 e3       	ldi	r26, 0x34	; 52
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e4 e3       	ldi	r30, 0x34	; 52
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <MDIO_Error_State_SetPinDirection+0x14c>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <MDIO_Error_State_SetPinDirection+0x148>
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	4e c0       	rjmp	.+156    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	88 23       	and	r24, r24
    1478:	a9 f4       	brne	.+42     	; 0x14a4 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    147a:	a4 e3       	ldi	r26, 0x34	; 52
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e4 e3       	ldi	r30, 0x34	; 52
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <MDIO_Error_State_SetPinDirection+0x17a>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <MDIO_Error_State_SetPinDirection+0x176>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	36 c0       	rjmp	.+108    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	34 c0       	rjmp	.+104    	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    14ae:	a1 e3       	ldi	r26, 0x31	; 49
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <MDIO_Error_State_SetPinDirection+0x1ae>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <MDIO_Error_State_SetPinDirection+0x1aa>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	1d c0       	rjmp	.+58     	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	88 23       	and	r24, r24
    14da:	a9 f4       	brne	.+42     	; 0x1506 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    14dc:	a1 e3       	ldi	r26, 0x31	; 49
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e1 e3       	ldi	r30, 0x31	; 49
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <MDIO_Error_State_SetPinDirection+0x1dc>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <MDIO_Error_State_SetPinDirection+0x1d8>
    14fe:	80 95       	com	r24
    1500:	84 23       	and	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    150e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
}
    1512:	26 96       	adiw	r28, 0x06	; 6
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <MDIO_Error_State_SetPortDirection+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <MDIO_Error_State_SetPortDirection+0x8>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	8a 83       	std	Y+2, r24	; 0x02
    1534:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	8f 3f       	cpi	r24, 0xFF	; 255
    153e:	19 f0       	breq	.+6      	; 0x1546 <MDIO_Error_State_SetPortDirection+0x22>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 23       	and	r24, r24
    1544:	a9 f5       	brne	.+106    	; 0x15b0 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3d 83       	std	Y+5, r19	; 0x05
    154e:	2c 83       	std	Y+4, r18	; 0x04
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	d1 f0       	breq	.+52     	; 0x158e <MDIO_Error_State_SetPortDirection+0x6a>
    155a:	2c 81       	ldd	r18, Y+4	; 0x04
    155c:	3d 81       	ldd	r19, Y+5	; 0x05
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <MDIO_Error_State_SetPortDirection+0x4a>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	61 f0       	breq	.+24     	; 0x1584 <MDIO_Error_State_SetPortDirection+0x60>
    156c:	1f c0       	rjmp	.+62     	; 0x15ac <MDIO_Error_State_SetPortDirection+0x88>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	81 f0       	breq	.+32     	; 0x1598 <MDIO_Error_State_SetPortDirection+0x74>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <MDIO_Error_State_SetPortDirection+0x7e>
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    1584:	ea e3       	ldi	r30, 0x3A	; 58
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	80 83       	st	Z, r24
    158c:	12 c0       	rjmp	.+36     	; 0x15b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	80 83       	st	Z, r24
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
    1598:	e4 e3       	ldi	r30, 0x34	; 52
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	80 83       	st	Z, r24
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
    15a2:	e1 e3       	ldi	r30, 0x31	; 49
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	80 83       	st	Z, r24
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    15ac:	19 82       	std	Y+1, r1	; 0x01
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    15b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <MDIO_Error_State_SetPinValue+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <MDIO_Error_State_SetPinValue+0x8>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <MDIO_Error_State_SetPinValue+0xa>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	6b 83       	std	Y+3, r22	; 0x03
    15d6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <MDIO_Error_State_SetPinValue+0x20>
    15e2:	e8 c0       	rjmp	.+464    	; 0x17b4 <MDIO_Error_State_SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3e 83       	std	Y+6, r19	; 0x06
    15ec:	2d 83       	std	Y+5, r18	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <MDIO_Error_State_SetPinValue+0x36>
    15f8:	48 c0       	rjmp	.+144    	; 0x168a <MDIO_Error_State_SetPinValue+0xc6>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	2c f4       	brge	.+10     	; 0x160e <MDIO_Error_State_SetPinValue+0x4a>
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	71 f0       	breq	.+28     	; 0x1628 <MDIO_Error_State_SetPinValue+0x64>
    160c:	d1 c0       	rjmp	.+418    	; 0x17b0 <MDIO_Error_State_SetPinValue+0x1ec>
    160e:	2d 81       	ldd	r18, Y+5	; 0x05
    1610:	3e 81       	ldd	r19, Y+6	; 0x06
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <MDIO_Error_State_SetPinValue+0x56>
    1618:	69 c0       	rjmp	.+210    	; 0x16ec <MDIO_Error_State_SetPinValue+0x128>
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <MDIO_Error_State_SetPinValue+0x62>
    1624:	94 c0       	rjmp	.+296    	; 0x174e <MDIO_Error_State_SetPinValue+0x18a>
    1626:	c4 c0       	rjmp	.+392    	; 0x17b0 <MDIO_Error_State_SetPinValue+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	a1 f4       	brne	.+40     	; 0x1656 <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    162e:	ab e3       	ldi	r26, 0x3B	; 59
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <MDIO_Error_State_SetPinValue+0x88>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <MDIO_Error_State_SetPinValue+0x84>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	b0 c0       	rjmp	.+352    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	88 23       	and	r24, r24
    165a:	a9 f4       	brne	.+42     	; 0x1686 <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    165c:	ab e3       	ldi	r26, 0x3B	; 59
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e3       	ldi	r30, 0x3B	; 59
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <MDIO_Error_State_SetPinValue+0xb6>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <MDIO_Error_State_SetPinValue+0xb2>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	98 c0       	rjmp	.+304    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	96 c0       	rjmp	.+300    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	a1 f4       	brne	.+40     	; 0x16b8 <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    1690:	a8 e3       	ldi	r26, 0x38	; 56
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <MDIO_Error_State_SetPinValue+0xea>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <MDIO_Error_State_SetPinValue+0xe6>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	7f c0       	rjmp	.+254    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	88 23       	and	r24, r24
    16bc:	a9 f4       	brne	.+42     	; 0x16e8 <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    16be:	a8 e3       	ldi	r26, 0x38	; 56
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e8 e3       	ldi	r30, 0x38	; 56
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <MDIO_Error_State_SetPinValue+0x118>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <MDIO_Error_State_SetPinValue+0x114>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	67 c0       	rjmp	.+206    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	65 c0       	rjmp	.+202    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <MDIO_Error_State_SetPinValue+0x14c>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <MDIO_Error_State_SetPinValue+0x148>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	4e c0       	rjmp	.+156    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	88 23       	and	r24, r24
    171e:	a9 f4       	brne	.+42     	; 0x174a <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1720:	a5 e3       	ldi	r26, 0x35	; 53
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e5 e3       	ldi	r30, 0x35	; 53
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <MDIO_Error_State_SetPinValue+0x17a>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <MDIO_Error_State_SetPinValue+0x176>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	36 c0       	rjmp	.+108    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	34 c0       	rjmp	.+104    	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	a1 f4       	brne	.+40     	; 0x177c <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    1754:	a2 e3       	ldi	r26, 0x32	; 50
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <MDIO_Error_State_SetPinValue+0x1ae>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <MDIO_Error_State_SetPinValue+0x1aa>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	1d c0       	rjmp	.+58     	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	88 23       	and	r24, r24
    1780:	a9 f4       	brne	.+42     	; 0x17ac <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1782:	a2 e3       	ldi	r26, 0x32	; 50
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e2 e3       	ldi	r30, 0x32	; 50
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MDIO_Error_State_SetPinValue+0x1dc>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <MDIO_Error_State_SetPinValue+0x1d8>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    17ac:	19 82       	std	Y+1, r1	; 0x01
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    17b0:	19 82       	std	Y+1, r1	; 0x01
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <MDIO_Error_State_SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    17b4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b8:	26 96       	adiw	r28, 0x06	; 6
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <MDIO_Error_State_SetPortValue+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <MDIO_Error_State_SetPortValue+0x8>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	d1 f0       	breq	.+52     	; 0x1828 <MDIO_Error_State_SetPortValue+0x5e>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <MDIO_Error_State_SetPortValue+0x3e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 f0       	breq	.+24     	; 0x181e <MDIO_Error_State_SetPortValue+0x54>
    1806:	1f c0       	rjmp	.+62     	; 0x1846 <MDIO_Error_State_SetPortValue+0x7c>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	81 f0       	breq	.+32     	; 0x1832 <MDIO_Error_State_SetPortValue+0x68>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	81 f0       	breq	.+32     	; 0x183c <MDIO_Error_State_SetPortValue+0x72>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    181e:	eb e3       	ldi	r30, 0x3B	; 59
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	80 83       	st	Z, r24
    1826:	10 c0       	rjmp	.+32     	; 0x1848 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    1828:	e8 e3       	ldi	r30, 0x38	; 56
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	80 83       	st	Z, r24
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	80 83       	st	Z, r24
    183a:	06 c0       	rjmp	.+12     	; 0x1848 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	80 83       	st	Z, r24
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
    1846:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	27 97       	sbiw	r28, 0x07	; 7
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	8a 83       	std	Y+2, r24	; 0x02
    1870:	6b 83       	std	Y+3, r22	; 0x03
    1872:	5d 83       	std	Y+5, r21	; 0x05
    1874:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 30       	cpi	r24, 0x08	; 8
    187e:	08 f0       	brcs	.+2      	; 0x1882 <MDIO_Error_State_GetPinValue+0x28>
    1880:	79 c0       	rjmp	.+242    	; 0x1974 <MDIO_Error_State_GetPinValue+0x11a>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <MDIO_Error_State_GetPinValue+0x34>
    188c:	73 c0       	rjmp	.+230    	; 0x1974 <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3f 83       	std	Y+7, r19	; 0x07
    1896:	2e 83       	std	Y+6, r18	; 0x06
    1898:	4e 81       	ldd	r20, Y+6	; 0x06
    189a:	5f 81       	ldd	r21, Y+7	; 0x07
    189c:	41 30       	cpi	r20, 0x01	; 1
    189e:	51 05       	cpc	r21, r1
    18a0:	59 f1       	breq	.+86     	; 0x18f8 <MDIO_Error_State_GetPinValue+0x9e>
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	9f 81       	ldd	r25, Y+7	; 0x07
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	91 05       	cpc	r25, r1
    18aa:	34 f4       	brge	.+12     	; 0x18b8 <MDIO_Error_State_GetPinValue+0x5e>
    18ac:	2e 81       	ldd	r18, Y+6	; 0x06
    18ae:	3f 81       	ldd	r19, Y+7	; 0x07
    18b0:	21 15       	cp	r18, r1
    18b2:	31 05       	cpc	r19, r1
    18b4:	69 f0       	breq	.+26     	; 0x18d0 <MDIO_Error_State_GetPinValue+0x76>
    18b6:	5c c0       	rjmp	.+184    	; 0x1970 <MDIO_Error_State_GetPinValue+0x116>
    18b8:	4e 81       	ldd	r20, Y+6	; 0x06
    18ba:	5f 81       	ldd	r21, Y+7	; 0x07
    18bc:	42 30       	cpi	r20, 0x02	; 2
    18be:	51 05       	cpc	r21, r1
    18c0:	79 f1       	breq	.+94     	; 0x1920 <MDIO_Error_State_GetPinValue+0xc6>
    18c2:	8e 81       	ldd	r24, Y+6	; 0x06
    18c4:	9f 81       	ldd	r25, Y+7	; 0x07
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <MDIO_Error_State_GetPinValue+0x74>
    18cc:	3d c0       	rjmp	.+122    	; 0x1948 <MDIO_Error_State_GetPinValue+0xee>
    18ce:	50 c0       	rjmp	.+160    	; 0x1970 <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    18d0:	e9 e3       	ldi	r30, 0x39	; 57
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <MDIO_Error_State_GetPinValue+0x8e>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <MDIO_Error_State_GetPinValue+0x8a>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	ec 81       	ldd	r30, Y+4	; 0x04
    18f2:	fd 81       	ldd	r31, Y+5	; 0x05
    18f4:	80 83       	st	Z, r24
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    18f8:	e6 e3       	ldi	r30, 0x36	; 54
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <MDIO_Error_State_GetPinValue+0xb6>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <MDIO_Error_State_GetPinValue+0xb2>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	ec 81       	ldd	r30, Y+4	; 0x04
    191a:	fd 81       	ldd	r31, Y+5	; 0x05
    191c:	80 83       	st	Z, r24
    191e:	2b c0       	rjmp	.+86     	; 0x1976 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1920:	e3 e3       	ldi	r30, 0x33	; 51
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <MDIO_Error_State_GetPinValue+0xde>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <MDIO_Error_State_GetPinValue+0xda>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	ec 81       	ldd	r30, Y+4	; 0x04
    1942:	fd 81       	ldd	r31, Y+5	; 0x05
    1944:	80 83       	st	Z, r24
    1946:	17 c0       	rjmp	.+46     	; 0x1976 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    1948:	e0 e3       	ldi	r30, 0x30	; 48
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <MDIO_Error_State_GetPinValue+0x106>
    195c:	55 95       	asr	r21
    195e:	47 95       	ror	r20
    1960:	8a 95       	dec	r24
    1962:	e2 f7       	brpl	.-8      	; 0x195c <MDIO_Error_State_GetPinValue+0x102>
    1964:	ca 01       	movw	r24, r20
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	ec 81       	ldd	r30, Y+4	; 0x04
    196a:	fd 81       	ldd	r31, Y+5	; 0x05
    196c:	80 83       	st	Z, r24
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1974:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1976:	89 81       	ldd	r24, Y+1	; 0x01
}
    1978:	27 96       	adiw	r28, 0x07	; 7
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <MDIO_Error_State_SetNippleValue+0x6>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <MDIO_Error_State_SetNippleValue+0x8>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <MDIO_Error_State_SetNippleValue+0xa>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
    199c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <MDIO_Error_State_SetNippleValue+0x20>
    19a8:	97 c0       	rjmp	.+302    	; 0x1ad8 <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3e 83       	std	Y+6, r19	; 0x06
    19b2:	2d 83       	std	Y+5, r18	; 0x05
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	a1 f1       	breq	.+104    	; 0x1a26 <MDIO_Error_State_SetNippleValue+0x9c>
    19be:	2d 81       	ldd	r18, Y+5	; 0x05
    19c0:	3e 81       	ldd	r19, Y+6	; 0x06
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <MDIO_Error_State_SetNippleValue+0x48>
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	71 f0       	breq	.+28     	; 0x19ec <MDIO_Error_State_SetNippleValue+0x62>
    19d0:	81 c0       	rjmp	.+258    	; 0x1ad4 <MDIO_Error_State_SetNippleValue+0x14a>
    19d2:	2d 81       	ldd	r18, Y+5	; 0x05
    19d4:	3e 81       	ldd	r19, Y+6	; 0x06
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <MDIO_Error_State_SetNippleValue+0x54>
    19dc:	41 c0       	rjmp	.+130    	; 0x1a60 <MDIO_Error_State_SetNippleValue+0xd6>
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	91 05       	cpc	r25, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <MDIO_Error_State_SetNippleValue+0x60>
    19e8:	58 c0       	rjmp	.+176    	; 0x1a9a <MDIO_Error_State_SetNippleValue+0x110>
    19ea:	74 c0       	rjmp	.+232    	; 0x1ad4 <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    19ec:	ab e3       	ldi	r26, 0x3B	; 59
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	eb e3       	ldi	r30, 0x3B	; 59
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	8f e0       	ldi	r24, 0x0F	; 15
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <MDIO_Error_State_SetNippleValue+0x80>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <MDIO_Error_State_SetNippleValue+0x7c>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	90 81       	ld	r25, Z
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	89 2b       	or	r24, r25
    1a22:	8c 93       	st	X, r24
    1a24:	5a c0       	rjmp	.+180    	; 0x1ada <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1a26:	a8 e3       	ldi	r26, 0x38	; 56
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	8f e0       	ldi	r24, 0x0F	; 15
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <MDIO_Error_State_SetNippleValue+0xba>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <MDIO_Error_State_SetNippleValue+0xb6>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    1a4e:	a8 e3       	ldi	r26, 0x38	; 56
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e8 e3       	ldi	r30, 0x38	; 56
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	90 81       	ld	r25, Z
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	89 2b       	or	r24, r25
    1a5c:	8c 93       	st	X, r24
    1a5e:	3d c0       	rjmp	.+122    	; 0x1ada <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1a60:	a5 e3       	ldi	r26, 0x35	; 53
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e5 e3       	ldi	r30, 0x35	; 53
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8f e0       	ldi	r24, 0x0F	; 15
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <MDIO_Error_State_SetNippleValue+0xf4>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <MDIO_Error_State_SetNippleValue+0xf0>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    1a88:	a5 e3       	ldi	r26, 0x35	; 53
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e5 e3       	ldi	r30, 0x35	; 53
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	90 81       	ld	r25, Z
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	89 2b       	or	r24, r25
    1a96:	8c 93       	st	X, r24
    1a98:	20 c0       	rjmp	.+64     	; 0x1ada <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1a9a:	a2 e3       	ldi	r26, 0x32	; 50
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e2 e3       	ldi	r30, 0x32	; 50
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	8f e0       	ldi	r24, 0x0F	; 15
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <MDIO_Error_State_SetNippleValue+0x12e>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <MDIO_Error_State_SetNippleValue+0x12a>
    1abc:	80 95       	com	r24
    1abe:	84 23       	and	r24, r20
    1ac0:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	90 81       	ld	r25, Z
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	89 2b       	or	r24, r25
    1ad0:	8c 93       	st	X, r24
    1ad2:	03 c0       	rjmp	.+6      	; 0x1ada <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1ad8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
}
    1adc:	26 96       	adiw	r28, 0x06	; 6
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <HLED_VidInit>:
#include"..\..\MCAL\MDIO\MDIO_Interface.h"
#include"HLED_Interface.h"
#include"util/delay.h"

void HLED_VidInit(LED_t *Copy_Led)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <HLED_VidInit+0x6>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	81 81       	ldd	r24, Z+1	; 0x01
    1b02:	e9 81       	ldd	r30, Y+1	; 0x01
    1b04:	fa 81       	ldd	r31, Y+2	; 0x02
    1b06:	90 81       	ld	r25, Z
    1b08:	69 2f       	mov	r22, r25
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <HLED_VidLed_On>:
void HLED_VidLed_On(LED_t *Copy_Led)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <HLED_VidLed_On+0x6>
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	81 81       	ldd	r24, Z+1	; 0x01
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	90 81       	ld	r25, Z
    1b34:	69 2f       	mov	r22, r25
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <HLED_VidLed_Off>:
void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <HLED_VidLed_Off+0x6>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	90 81       	ld	r25, Z
    1b60:	69 2f       	mov	r22, r25
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <HLED_VidLed_Toggle+0x6>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	/*Toggle Function*/
		static u8 Flag=0;
		if(Flag==0)
    1b80:	80 91 68 00 	lds	r24, 0x0068
    1b84:	88 23       	and	r24, r24
    1b86:	71 f4       	brne	.+28     	; 0x1ba4 <HLED_VidLed_Toggle+0x32>
		{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	81 81       	ldd	r24, Z+1	; 0x01
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	90 81       	ld	r25, Z
    1b94:	69 2f       	mov	r22, r25
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
		Flag=1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	80 93 68 00 	sts	0x0068, r24
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <HLED_VidLed_Toggle+0x4a>
		}
		else
		{
		MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	81 81       	ldd	r24, Z+1	; 0x01
    1baa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bac:	fa 81       	ldd	r31, Y+2	; 0x02
    1bae:	90 81       	ld	r25, Z
    1bb0:	69 2f       	mov	r22, r25
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
		Flag=0;
    1bb8:	10 92 68 00 	sts	0x0068, r1
		}

}
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <HCLCD_VidWriteCommand_8Bits>:
#include"HCLCD_Interface.h"

#include"util/delay.h"

void HCLCD_VidWriteCommand_8Bits(u8 Copy_u8Command)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	6d 97       	sbiw	r28, 0x1d	; 29
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	62 e0       	ldi	r22, 0x02	; 2
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bea:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e4       	ldi	r27, 0x40	; 64
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    1c02:	9a 8f       	std	Y+26, r25	; 0x1a
    1c04:	ab 8f       	std	Y+27, r26	; 0x1b
    1c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8d 8b       	std	Y+21, r24	; 0x15
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	af 8b       	std	Y+23, r26	; 0x17
    1c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <HCLCD_VidWriteCommand_8Bits+0x84>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <HCLCD_VidWriteCommand_8Bits+0x102>
	else if (__tmp > 65535)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <HCLCD_VidWriteCommand_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <HCLCD_VidWriteCommand_8Bits+0xe4>
    1c8c:	89 e1       	ldi	r24, 0x19	; 25
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c94:	89 89       	ldd	r24, Y+17	; 0x11
    1c96:	9a 89       	ldd	r25, Y+18	; 0x12
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <HCLCD_VidWriteCommand_8Bits+0xd2>
    1c9c:	9a 8b       	std	Y+18, r25	; 0x12
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9c 8b       	std	Y+20, r25	; 0x14
    1ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cac:	9c 89       	ldd	r25, Y+20	; 0x14
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <HCLCD_VidWriteCommand_8Bits+0xc6>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <HCLCD_VidWriteCommand_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <HCLCD_VidWriteCommand_8Bits+0x10e>
    1cd8:	98 8b       	std	Y+16, r25	; 0x10
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 e0       	ldi	r26, 0x00	; 0
    1cec:	b0 e4       	ldi	r27, 0x40	; 64
    1cee:	8b 87       	std	Y+11, r24	; 0x0b
    1cf0:	9c 87       	std	Y+12, r25	; 0x0c
    1cf2:	ad 87       	std	Y+13, r26	; 0x0d
    1cf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	53 e4       	ldi	r21, 0x43	; 67
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
    1d10:	98 87       	std	Y+8, r25	; 0x08
    1d12:	a9 87       	std	Y+9, r26	; 0x09
    1d14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <HCLCD_VidWriteCommand_8Bits+0x172>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <HCLCD_VidWriteCommand_8Bits+0x1f0>
	else if (__tmp > 65535)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <HCLCD_VidWriteCommand_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <HCLCD_VidWriteCommand_8Bits+0x1d2>
    1d7a:	89 e1       	ldi	r24, 0x19	; 25
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	9c 81       	ldd	r25, Y+4	; 0x04
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HCLCD_VidWriteCommand_8Bits+0x1c0>
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <HCLCD_VidWriteCommand_8Bits+0x1b4>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <HCLCD_VidWriteCommand_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <HCLCD_VidWriteCommand_8Bits+0x1fc>
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    1dd4:	6d 96       	adiw	r28, 0x1d	; 29
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <HCLCD_Vid8Bits_Init>:

void HCLCD_Vid8Bits_Init(void)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	e8 97       	sbiw	r28, 0x38	; 56
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and control port intialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	6f ef       	ldi	r22, 0xFF	; 255
    1dfe:	0e 94 92 0a 	call	0x1524	; 0x1524 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 ef       	ldi	r26, 0xF0	; 240
    1e1c:	b1 e4       	ldi	r27, 0x41	; 65
    1e1e:	8d ab       	std	Y+53, r24	; 0x35
    1e20:	9e ab       	std	Y+54, r25	; 0x36
    1e22:	af ab       	std	Y+55, r26	; 0x37
    1e24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6d a9       	ldd	r22, Y+53	; 0x35
    1e28:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	89 ab       	std	Y+49, r24	; 0x31
    1e40:	9a ab       	std	Y+50, r25	; 0x32
    1e42:	ab ab       	std	Y+51, r26	; 0x33
    1e44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e46:	69 a9       	ldd	r22, Y+49	; 0x31
    1e48:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <HCLCD_Vid8Bits_Init+0x82>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <HCLCD_Vid8Bits_Init+0x100>
	else if (__tmp > 65535)
    1e68:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <HCLCD_Vid8Bits_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6d a9       	ldd	r22, Y+53	; 0x35
    1e82:	7e a9       	ldd	r23, Y+54	; 0x36
    1e84:	8f a9       	ldd	r24, Y+55	; 0x37
    1e86:	98 ad       	ldd	r25, Y+56	; 0x38
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	98 ab       	std	Y+48, r25	; 0x30
    1ea6:	8f a7       	std	Y+47, r24	; 0x2f
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <HCLCD_Vid8Bits_Init+0xe2>
    1eaa:	89 e1       	ldi	r24, 0x19	; 25
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9e a7       	std	Y+46, r25	; 0x2e
    1eb0:	8d a7       	std	Y+45, r24	; 0x2d
    1eb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <HCLCD_Vid8Bits_Init+0xd0>
    1eba:	9e a7       	std	Y+46, r25	; 0x2e
    1ebc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <HCLCD_Vid8Bits_Init+0xc4>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <HCLCD_Vid8Bits_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	98 ab       	std	Y+48, r25	; 0x30
    1ee4:	8f a7       	std	Y+47, r24	; 0x2f
    1ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eea:	9c a7       	std	Y+44, r25	; 0x2c
    1eec:	8b a7       	std	Y+43, r24	; 0x2b
    1eee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <HCLCD_Vid8Bits_Init+0x10c>
    1ef6:	9c a7       	std	Y+44, r25	; 0x2c
    1ef8:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_FUNCTION_SET);
    1efa:	88 e2       	ldi	r24, 0x28	; 40
    1efc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	8f a3       	std	Y+39, r24	; 0x27
    1f0a:	98 a7       	std	Y+40, r25	; 0x28
    1f0c:	a9 a7       	std	Y+41, r26	; 0x29
    1f0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6f a1       	ldd	r22, Y+39	; 0x27
    1f12:	78 a5       	ldd	r23, Y+40	; 0x28
    1f14:	89 a5       	ldd	r24, Y+41	; 0x29
    1f16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8b a3       	std	Y+35, r24	; 0x23
    1f2a:	9c a3       	std	Y+36, r25	; 0x24
    1f2c:	ad a3       	std	Y+37, r26	; 0x25
    1f2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f30:	6b a1       	ldd	r22, Y+35	; 0x23
    1f32:	7c a1       	ldd	r23, Y+36	; 0x24
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	9e a1       	ldd	r25, Y+38	; 0x26
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <HCLCD_Vid8Bits_Init+0x16c>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <HCLCD_Vid8Bits_Init+0x1ea>
	else if (__tmp > 65535)
    1f52:	6b a1       	ldd	r22, Y+35	; 0x23
    1f54:	7c a1       	ldd	r23, Y+36	; 0x24
    1f56:	8d a1       	ldd	r24, Y+37	; 0x25
    1f58:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <HCLCD_Vid8Bits_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <HCLCD_Vid8Bits_Init+0x1cc>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	98 a3       	std	Y+32, r25	; 0x20
    1f9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <HCLCD_Vid8Bits_Init+0x1ba>
    1fa4:	98 a3       	std	Y+32, r25	; 0x20
    1fa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1faa:	9a a1       	ldd	r25, Y+34	; 0x22
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9a a3       	std	Y+34, r25	; 0x22
    1fb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <HCLCD_Vid8Bits_Init+0x1ae>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <HCLCD_Vid8Bits_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <HCLCD_Vid8Bits_Init+0x1f6>
    1fe0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_DISPLAY_ON_OFF);
    1fe4:	8f e0       	ldi	r24, 0x0F	; 15
    1fe6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	89 8f       	std	Y+25, r24	; 0x19
    1ff4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ff8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2000:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8d 8b       	std	Y+21, r24	; 0x15
    2014:	9e 8b       	std	Y+22, r25	; 0x16
    2016:	af 8b       	std	Y+23, r26	; 0x17
    2018:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201a:	6d 89       	ldd	r22, Y+21	; 0x15
    201c:	7e 89       	ldd	r23, Y+22	; 0x16
    201e:	8f 89       	ldd	r24, Y+23	; 0x17
    2020:	98 8d       	ldd	r25, Y+24	; 0x18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <HCLCD_Vid8Bits_Init+0x256>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <HCLCD_Vid8Bits_Init+0x2d4>
	else if (__tmp > 65535)
    203c:	6d 89       	ldd	r22, Y+21	; 0x15
    203e:	7e 89       	ldd	r23, Y+22	; 0x16
    2040:	8f 89       	ldd	r24, Y+23	; 0x17
    2042:	98 8d       	ldd	r25, Y+24	; 0x18
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <HCLCD_Vid8Bits_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	0f c0       	rjmp	.+30     	; 0x209c <HCLCD_Vid8Bits_Init+0x2b6>
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9a 8b       	std	Y+18, r25	; 0x12
    2084:	89 8b       	std	Y+17, r24	; 0x11
    2086:	89 89       	ldd	r24, Y+17	; 0x11
    2088:	9a 89       	ldd	r25, Y+18	; 0x12
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <HCLCD_Vid8Bits_Init+0x2a4>
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <HCLCD_Vid8Bits_Init+0x298>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <HCLCD_Vid8Bits_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6d 89       	ldd	r22, Y+21	; 0x15
    20a8:	7e 89       	ldd	r23, Y+22	; 0x16
    20aa:	8f 89       	ldd	r24, Y+23	; 0x17
    20ac:	98 8d       	ldd	r25, Y+24	; 0x18
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	98 8b       	std	Y+16, r25	; 0x10
    20c0:	8f 87       	std	Y+15, r24	; 0x0f
    20c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c4:	98 89       	ldd	r25, Y+16	; 0x10
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <HCLCD_Vid8Bits_Init+0x2e0>
    20ca:	98 8b       	std	Y+16, r25	; 0x10
    20cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e4       	ldi	r27, 0x40	; 64
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
    20de:	9c 87       	std	Y+12, r25	; 0x0c
    20e0:	ad 87       	std	Y+13, r26	; 0x0d
    20e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a e7       	ldi	r20, 0x7A	; 122
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8f 83       	std	Y+7, r24	; 0x07
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	a9 87       	std	Y+9, r26	; 0x09
    2102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <HCLCD_Vid8Bits_Init+0x340>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <HCLCD_Vid8Bits_Init+0x3be>
	else if (__tmp > 65535)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <HCLCD_Vid8Bits_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <HCLCD_Vid8Bits_Init+0x3a0>
    2168:	89 e1       	ldi	r24, 0x19	; 25
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <HCLCD_Vid8Bits_Init+0x38e>
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <HCLCD_Vid8Bits_Init+0x382>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <HCLCD_Vid8Bits_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <HCLCD_Vid8Bits_Init+0x3ca>
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_ENTRY_MODE_SET);
    21b8:	86 e0       	ldi	r24, 0x06	; 6
    21ba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
}
    21be:	e8 96       	adiw	r28, 0x38	; 56
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <HCLCD_VidWriteChar_8Bits>:
void HCLCD_VidWriteChar_8Bits(u8 Copy_u8Data)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	6d 97       	sbiw	r28, 0x1d	; 29
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Data register--> Write one on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21f4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e4       	ldi	r27, 0x40	; 64
    220a:	89 8f       	std	Y+25, r24	; 0x19
    220c:	9a 8f       	std	Y+26, r25	; 0x1a
    220e:	ab 8f       	std	Y+27, r26	; 0x1b
    2210:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	69 8d       	ldd	r22, Y+25	; 0x19
    2214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a e7       	ldi	r20, 0x7A	; 122
    2220:	53 e4       	ldi	r21, 0x43	; 67
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8d 8b       	std	Y+21, r24	; 0x15
    222c:	9e 8b       	std	Y+22, r25	; 0x16
    222e:	af 8b       	std	Y+23, r26	; 0x17
    2230:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <HCLCD_VidWriteChar_8Bits+0x84>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <HCLCD_VidWriteChar_8Bits+0x102>
	else if (__tmp > 65535)
    2254:	6d 89       	ldd	r22, Y+21	; 0x15
    2256:	7e 89       	ldd	r23, Y+22	; 0x16
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <HCLCD_VidWriteChar_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	69 8d       	ldd	r22, Y+25	; 0x19
    226e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <HCLCD_VidWriteChar_8Bits+0xe4>
    2296:	89 e1       	ldi	r24, 0x19	; 25
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9a 8b       	std	Y+18, r25	; 0x12
    229c:	89 8b       	std	Y+17, r24	; 0x11
    229e:	89 89       	ldd	r24, Y+17	; 0x11
    22a0:	9a 89       	ldd	r25, Y+18	; 0x12
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <HCLCD_VidWriteChar_8Bits+0xd2>
    22a6:	9a 8b       	std	Y+18, r25	; 0x12
    22a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8b 89       	ldd	r24, Y+19	; 0x13
    22b6:	9c 89       	ldd	r25, Y+20	; 0x14
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <HCLCD_VidWriteChar_8Bits+0xc6>
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <HCLCD_VidWriteChar_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	6d 89       	ldd	r22, Y+21	; 0x15
    22c0:	7e 89       	ldd	r23, Y+22	; 0x16
    22c2:	8f 89       	ldd	r24, Y+23	; 0x17
    22c4:	98 8d       	ldd	r25, Y+24	; 0x18
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	98 8b       	std	Y+16, r25	; 0x10
    22d8:	8f 87       	std	Y+15, r24	; 0x0f
    22da:	8f 85       	ldd	r24, Y+15	; 0x0f
    22dc:	98 89       	ldd	r25, Y+16	; 0x10
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <HCLCD_VidWriteChar_8Bits+0x10e>
    22e2:	98 8b       	std	Y+16, r25	; 0x10
    22e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e4       	ldi	r27, 0x40	; 64
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	9c 87       	std	Y+12, r25	; 0x0c
    22fc:	ad 87       	std	Y+13, r26	; 0x0d
    22fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a e7       	ldi	r20, 0x7A	; 122
    230e:	53 e4       	ldi	r21, 0x43	; 67
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8f 83       	std	Y+7, r24	; 0x07
    231a:	98 87       	std	Y+8, r25	; 0x08
    231c:	a9 87       	std	Y+9, r26	; 0x09
    231e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <HCLCD_VidWriteChar_8Bits+0x172>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <HCLCD_VidWriteChar_8Bits+0x1f0>
	else if (__tmp > 65535)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <HCLCD_VidWriteChar_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <HCLCD_VidWriteChar_8Bits+0x1d2>
    2384:	89 e1       	ldi	r24, 0x19	; 25
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <HCLCD_VidWriteChar_8Bits+0x1c0>
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <HCLCD_VidWriteChar_8Bits+0x1b4>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <HCLCD_VidWriteChar_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <HCLCD_VidWriteChar_8Bits+0x1fc>
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    23de:	6d 96       	adiw	r28, 0x1d	; 29
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <HCLCD_VidWriteString_8Bits>:

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <HCLCD_VidWriteString_8Bits+0x6>
    23f6:	0f 92       	push	r0
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2400:	19 82       	std	Y+1, r1	; 0x01
    2402:	0e c0       	rjmp	.+28     	; 0x2420 <HCLCD_VidWriteString_8Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	80 81       	ld	r24, Z
    2416:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <HCLCD_VidWriteChar_8Bits>
		Loc_u8Count++;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	89 83       	std	Y+1, r24	; 0x01
}

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	9b 81       	ldd	r25, Y+3	; 0x03
    242a:	fc 01       	movw	r30, r24
    242c:	e2 0f       	add	r30, r18
    242e:	f3 1f       	adc	r31, r19
    2430:	80 81       	ld	r24, Z
    2432:	88 23       	and	r24, r24
    2434:	39 f7       	brne	.-50     	; 0x2404 <HCLCD_VidWriteString_8Bits+0x14>
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <HCLCD_VidWriteNumber_8Bits>:
void HCLCD_VidWriteNumber_8Bits(u32 Copy_u8Number)
{
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	60 97       	sbiw	r28, 0x10	; 16
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	6d 87       	std	Y+13, r22	; 0x0d
    245c:	7e 87       	std	Y+14, r23	; 0x0e
    245e:	8f 87       	std	Y+15, r24	; 0x0f
    2460:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2462:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2464:	8d 85       	ldd	r24, Y+13	; 0x0d
    2466:	9e 85       	ldd	r25, Y+14	; 0x0e
    2468:	af 85       	ldd	r26, Y+15	; 0x0f
    246a:	b8 89       	ldd	r27, Y+16	; 0x10
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	a1 05       	cpc	r26, r1
    2470:	b1 05       	cpc	r27, r1
    2472:	09 f4       	brne	.+2      	; 0x2476 <HCLCD_VidWriteNumber_8Bits+0x34>
    2474:	4f c0       	rjmp	.+158    	; 0x2514 <HCLCD_VidWriteNumber_8Bits+0xd2>
    2476:	2d c0       	rjmp	.+90     	; 0x24d2 <HCLCD_VidWriteNumber_8Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	08 2f       	mov	r16, r24
    247c:	10 e0       	ldi	r17, 0x00	; 0
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	af 85       	ldd	r26, Y+15	; 0x0f
    2484:	b8 89       	ldd	r27, Y+16	; 0x10
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__udivmodsi4>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	28 2f       	mov	r18, r24
    249c:	ce 01       	movw	r24, r28
    249e:	03 96       	adiw	r24, 0x03	; 3
    24a0:	fc 01       	movw	r30, r24
    24a2:	e0 0f       	add	r30, r16
    24a4:	f1 1f       	adc	r31, r17
    24a6:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    24a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ac:	af 85       	ldd	r26, Y+15	; 0x0f
    24ae:	b8 89       	ldd	r27, Y+16	; 0x10
    24b0:	2a e0       	ldi	r18, 0x0A	; 10
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__udivmodsi4>
    24c0:	da 01       	movw	r26, r20
    24c2:	c9 01       	movw	r24, r18
    24c4:	8d 87       	std	Y+13, r24	; 0x0d
    24c6:	9e 87       	std	Y+14, r25	; 0x0e
    24c8:	af 87       	std	Y+15, r26	; 0x0f
    24ca:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	af 85       	ldd	r26, Y+15	; 0x0f
    24d8:	b8 89       	ldd	r27, Y+16	; 0x10
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	a1 05       	cpc	r26, r1
    24de:	b1 05       	cpc	r27, r1
    24e0:	59 f6       	brne	.-106    	; 0x2478 <HCLCD_VidWriteNumber_8Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	81 50       	subi	r24, 0x01	; 1
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	11 c0       	rjmp	.+34     	; 0x250c <HCLCD_VidWriteNumber_8Bits+0xca>
		{
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	33 27       	eor	r19, r19
    24f0:	27 fd       	sbrc	r18, 7
    24f2:	30 95       	com	r19
    24f4:	ce 01       	movw	r24, r28
    24f6:	03 96       	adiw	r24, 0x03	; 3
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	80 5d       	subi	r24, 0xD0	; 208
    2502:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <HCLCD_VidWriteChar_8Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	81 50       	subi	r24, 0x01	; 1
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 23       	and	r24, r24
    2510:	64 f7       	brge	.-40     	; 0x24ea <HCLCD_VidWriteNumber_8Bits+0xa8>
    2512:	03 c0       	rjmp	.+6      	; 0x251a <HCLCD_VidWriteNumber_8Bits+0xd8>
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    2514:	80 e3       	ldi	r24, 0x30	; 48
    2516:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <HCLCD_VidWriteChar_8Bits>
	}
}
    251a:	60 96       	adiw	r28, 0x10	; 16
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <HCLCD_VidSetPosition>:
void HCLCD_VidSetPosition(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <HCLCD_VidSetPosition+0x6>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	41 f4       	brne	.+16     	; 0x2554 <HCLCD_VidSetPosition+0x24>
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	80 31       	cpi	r24, 0x10	; 16
    2548:	28 f4       	brcc	.+10     	; 0x2554 <HCLCD_VidSetPosition+0x24>
	{
		HCLCD_VidWriteCommand_8Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	80 58       	subi	r24, 0x80	; 128
    254e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
    2552:	0a c0       	rjmp	.+20     	; 0x2568 <HCLCD_VidSetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	82 30       	cpi	r24, 0x02	; 2
    2558:	39 f4       	brne	.+14     	; 0x2568 <HCLCD_VidSetPosition+0x38>
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	80 31       	cpi	r24, 0x10	; 16
    255e:	20 f4       	brcc	.+8      	; 0x2568 <HCLCD_VidSetPosition+0x38>
	{
		HCLCD_VidWriteCommand_8Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	80 54       	subi	r24, 0x40	; 64
    2564:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <HCLCD_VidWriteCommand_8Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <HCLCD_VidWriteCommand_4Bits>:

void HCLCD_VidWriteCommand_4Bits(u8 Copy_u8Command)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	60 97       	sbiw	r28, 0x10	; 16
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send  Command*/
	LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
    2592:	88 89       	ldd	r24, Y+16	; 0x10
    2594:	8f 70       	andi	r24, 0x0F	; 15
    2596:	88 0f       	add	r24, r24
    2598:	88 0f       	add	r24, r24
    259a:	88 0f       	add	r24, r24
    259c:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyCommand);
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	4f 85       	ldd	r20, Y+15	; 0x0f
    25a4:	0e 94 c5 0c 	call	0x198a	; 0x198a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	62 e0       	ldi	r22, 0x02	; 2
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a0 e0       	ldi	r26, 0x00	; 0
    25b8:	b0 e4       	ldi	r27, 0x40	; 64
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
    25bc:	9c 87       	std	Y+12, r25	; 0x0c
    25be:	ad 87       	std	Y+13, r26	; 0x0d
    25c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a e7       	ldi	r20, 0x7A	; 122
    25d0:	53 e4       	ldi	r21, 0x43	; 67
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8f 83       	std	Y+7, r24	; 0x07
    25dc:	98 87       	std	Y+8, r25	; 0x08
    25de:	a9 87       	std	Y+9, r26	; 0x09
    25e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	2c f4       	brge	.+10     	; 0x2604 <HCLCD_VidWriteCommand_4Bits+0x92>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	3f c0       	rjmp	.+126    	; 0x2682 <HCLCD_VidWriteCommand_4Bits+0x110>
	else if (__tmp > 65535)
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	4c f5       	brge	.+82     	; 0x266e <HCLCD_VidWriteCommand_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	6b 85       	ldd	r22, Y+11	; 0x0b
    261e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2620:	8d 85       	ldd	r24, Y+13	; 0x0d
    2622:	9e 85       	ldd	r25, Y+14	; 0x0e
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	0f c0       	rjmp	.+30     	; 0x2664 <HCLCD_VidWriteCommand_4Bits+0xf2>
    2646:	89 e1       	ldi	r24, 0x19	; 25
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <HCLCD_VidWriteCommand_4Bits+0xe0>
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	69 f7       	brne	.-38     	; 0x2646 <HCLCD_VidWriteCommand_4Bits+0xd4>
    266c:	14 c0       	rjmp	.+40     	; 0x2696 <HCLCD_VidWriteCommand_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266e:	6f 81       	ldd	r22, Y+7	; 0x07
    2670:	78 85       	ldd	r23, Y+8	; 0x08
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <HCLCD_VidWriteCommand_4Bits+0x11c>
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    26a0:	60 96       	adiw	r28, 0x10	; 16
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <HCLCD_Vid4Bits_Init>:
void HCLCD_Vid4Bits_Init(void)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	e9 97       	sbiw	r28, 0x39	; 57
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    26c6:	86 e0       	ldi	r24, 0x06	; 6
    26c8:	89 af       	std	Y+57, r24	; 0x39
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <HCLCD_Vid4Bits_Init+0x2a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    26cc:	89 ad       	ldd	r24, Y+57	; 0x39
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
}
void HCLCD_Vid4Bits_Init(void)
{
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    26d6:	89 ad       	ldd	r24, Y+57	; 0x39
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	89 af       	std	Y+57, r24	; 0x39
    26dc:	89 ad       	ldd	r24, Y+57	; 0x39
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	ac f7       	brge	.-22     	; 0x26cc <HCLCD_Vid4Bits_Init+0x1a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	62 e0       	ldi	r22, 0x02	; 2
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 ef       	ldi	r26, 0xF0	; 240
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	8d ab       	std	Y+53, r24	; 0x35
    2700:	9e ab       	std	Y+54, r25	; 0x36
    2702:	af ab       	std	Y+55, r26	; 0x37
    2704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6d a9       	ldd	r22, Y+53	; 0x35
    2708:	7e a9       	ldd	r23, Y+54	; 0x36
    270a:	8f a9       	ldd	r24, Y+55	; 0x37
    270c:	98 ad       	ldd	r25, Y+56	; 0x38
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	53 e4       	ldi	r21, 0x43	; 67
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	89 ab       	std	Y+49, r24	; 0x31
    2720:	9a ab       	std	Y+50, r25	; 0x32
    2722:	ab ab       	std	Y+51, r26	; 0x33
    2724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <HCLCD_Vid4Bits_Init+0x96>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <HCLCD_Vid4Bits_Init+0x114>
	else if (__tmp > 65535)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <HCLCD_Vid4Bits_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6d a9       	ldd	r22, Y+53	; 0x35
    2762:	7e a9       	ldd	r23, Y+54	; 0x36
    2764:	8f a9       	ldd	r24, Y+55	; 0x37
    2766:	98 ad       	ldd	r25, Y+56	; 0x38
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	98 ab       	std	Y+48, r25	; 0x30
    2786:	8f a7       	std	Y+47, r24	; 0x2f
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <HCLCD_Vid4Bits_Init+0xf6>
    278a:	89 e1       	ldi	r24, 0x19	; 25
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
    2792:	8d a5       	ldd	r24, Y+45	; 0x2d
    2794:	9e a5       	ldd	r25, Y+46	; 0x2e
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <HCLCD_Vid4Bits_Init+0xe4>
    279a:	9e a7       	std	Y+46, r25	; 0x2e
    279c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a0:	98 a9       	ldd	r25, Y+48	; 0x30
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27aa:	98 a9       	ldd	r25, Y+48	; 0x30
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <HCLCD_Vid4Bits_Init+0xd8>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <HCLCD_Vid4Bits_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a9       	ldd	r22, Y+49	; 0x31
    27b4:	7a a9       	ldd	r23, Y+50	; 0x32
    27b6:	8b a9       	ldd	r24, Y+51	; 0x33
    27b8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <HCLCD_Vid4Bits_Init+0x120>
    27d6:	9c a7       	std	Y+44, r25	; 0x2c
    27d8:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET);
    27e6:	88 e2       	ldi	r24, 0x28	; 40
    27e8:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a0 e8       	ldi	r26, 0x80	; 128
    27f2:	bf e3       	ldi	r27, 0x3F	; 63
    27f4:	8f a3       	std	Y+39, r24	; 0x27
    27f6:	98 a7       	std	Y+40, r25	; 0x28
    27f8:	a9 a7       	std	Y+41, r26	; 0x29
    27fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6f a1       	ldd	r22, Y+39	; 0x27
    27fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2800:	89 a5       	ldd	r24, Y+41	; 0x29
    2802:	9a a5       	ldd	r25, Y+42	; 0x2a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	53 e4       	ldi	r21, 0x43	; 67
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8b a3       	std	Y+35, r24	; 0x23
    2816:	9c a3       	std	Y+36, r25	; 0x24
    2818:	ad a3       	std	Y+37, r26	; 0x25
    281a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    281c:	6b a1       	ldd	r22, Y+35	; 0x23
    281e:	7c a1       	ldd	r23, Y+36	; 0x24
    2820:	8d a1       	ldd	r24, Y+37	; 0x25
    2822:	9e a1       	ldd	r25, Y+38	; 0x26
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <HCLCD_Vid4Bits_Init+0x18c>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9a a3       	std	Y+34, r25	; 0x22
    283a:	89 a3       	std	Y+33, r24	; 0x21
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <HCLCD_Vid4Bits_Init+0x20a>
	else if (__tmp > 65535)
    283e:	6b a1       	ldd	r22, Y+35	; 0x23
    2840:	7c a1       	ldd	r23, Y+36	; 0x24
    2842:	8d a1       	ldd	r24, Y+37	; 0x25
    2844:	9e a1       	ldd	r25, Y+38	; 0x26
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <HCLCD_Vid4Bits_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6f a1       	ldd	r22, Y+39	; 0x27
    2858:	78 a5       	ldd	r23, Y+40	; 0x28
    285a:	89 a5       	ldd	r24, Y+41	; 0x29
    285c:	9a a5       	ldd	r25, Y+42	; 0x2a
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9a a3       	std	Y+34, r25	; 0x22
    287c:	89 a3       	std	Y+33, r24	; 0x21
    287e:	0f c0       	rjmp	.+30     	; 0x289e <HCLCD_Vid4Bits_Init+0x1ec>
    2880:	89 e1       	ldi	r24, 0x19	; 25
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	98 a3       	std	Y+32, r25	; 0x20
    2886:	8f 8f       	std	Y+31, r24	; 0x1f
    2888:	8f 8d       	ldd	r24, Y+31	; 0x1f
    288a:	98 a1       	ldd	r25, Y+32	; 0x20
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <HCLCD_Vid4Bits_Init+0x1da>
    2890:	98 a3       	std	Y+32, r25	; 0x20
    2892:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	89 a1       	ldd	r24, Y+33	; 0x21
    2896:	9a a1       	ldd	r25, Y+34	; 0x22
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9a a3       	std	Y+34, r25	; 0x22
    289c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	89 a1       	ldd	r24, Y+33	; 0x21
    28a0:	9a a1       	ldd	r25, Y+34	; 0x22
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <HCLCD_Vid4Bits_Init+0x1ce>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <HCLCD_Vid4Bits_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9a a3       	std	Y+34, r25	; 0x22
    28ba:	89 a3       	std	Y+33, r24	; 0x21
    28bc:	89 a1       	ldd	r24, Y+33	; 0x21
    28be:	9a a1       	ldd	r25, Y+34	; 0x22
    28c0:	9e 8f       	std	Y+30, r25	; 0x1e
    28c2:	8d 8f       	std	Y+29, r24	; 0x1d
    28c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <HCLCD_Vid4Bits_Init+0x216>
    28cc:	9e 8f       	std	Y+30, r25	; 0x1e
    28ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF>>4);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF);
    28d6:	8f e0       	ldi	r24, 0x0F	; 15
    28d8:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e8       	ldi	r26, 0x80	; 128
    28e2:	bf e3       	ldi	r27, 0x3F	; 63
    28e4:	89 8f       	std	Y+25, r24	; 0x19
    28e6:	9a 8f       	std	Y+26, r25	; 0x1a
    28e8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	69 8d       	ldd	r22, Y+25	; 0x19
    28ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a e7       	ldi	r20, 0x7A	; 122
    28fa:	53 e4       	ldi	r21, 0x43	; 67
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8d 8b       	std	Y+21, r24	; 0x15
    2906:	9e 8b       	std	Y+22, r25	; 0x16
    2908:	af 8b       	std	Y+23, r26	; 0x17
    290a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    290c:	6d 89       	ldd	r22, Y+21	; 0x15
    290e:	7e 89       	ldd	r23, Y+22	; 0x16
    2910:	8f 89       	ldd	r24, Y+23	; 0x17
    2912:	98 8d       	ldd	r25, Y+24	; 0x18
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <HCLCD_Vid4Bits_Init+0x27c>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 8b       	std	Y+20, r25	; 0x14
    292a:	8b 8b       	std	Y+19, r24	; 0x13
    292c:	3f c0       	rjmp	.+126    	; 0x29ac <HCLCD_Vid4Bits_Init+0x2fa>
	else if (__tmp > 65535)
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	4c f5       	brge	.+82     	; 0x2998 <HCLCD_Vid4Bits_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2946:	69 8d       	ldd	r22, Y+25	; 0x19
    2948:	7a 8d       	ldd	r23, Y+26	; 0x1a
    294a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
    296e:	0f c0       	rjmp	.+30     	; 0x298e <HCLCD_Vid4Bits_Init+0x2dc>
    2970:	89 e1       	ldi	r24, 0x19	; 25
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9a 8b       	std	Y+18, r25	; 0x12
    2976:	89 8b       	std	Y+17, r24	; 0x11
    2978:	89 89       	ldd	r24, Y+17	; 0x11
    297a:	9a 89       	ldd	r25, Y+18	; 0x12
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <HCLCD_Vid4Bits_Init+0x2ca>
    2980:	9a 8b       	std	Y+18, r25	; 0x12
    2982:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9c 8b       	std	Y+20, r25	; 0x14
    298c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	8b 89       	ldd	r24, Y+19	; 0x13
    2990:	9c 89       	ldd	r25, Y+20	; 0x14
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <HCLCD_Vid4Bits_Init+0x2be>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <HCLCD_Vid4Bits_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	6d 89       	ldd	r22, Y+21	; 0x15
    299a:	7e 89       	ldd	r23, Y+22	; 0x16
    299c:	8f 89       	ldd	r24, Y+23	; 0x17
    299e:	98 8d       	ldd	r25, Y+24	; 0x18
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9c 8b       	std	Y+20, r25	; 0x14
    29aa:	8b 8b       	std	Y+19, r24	; 0x13
    29ac:	8b 89       	ldd	r24, Y+19	; 0x13
    29ae:	9c 89       	ldd	r25, Y+20	; 0x14
    29b0:	98 8b       	std	Y+16, r25	; 0x10
    29b2:	8f 87       	std	Y+15, r24	; 0x0f
    29b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b6:	98 89       	ldd	r25, Y+16	; 0x10
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <HCLCD_Vid4Bits_Init+0x306>
    29bc:	98 8b       	std	Y+16, r25	; 0x10
    29be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR>>4);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e0       	ldi	r26, 0x00	; 0
    29d2:	b0 e4       	ldi	r27, 0x40	; 64
    29d4:	8b 87       	std	Y+11, r24	; 0x0b
    29d6:	9c 87       	std	Y+12, r25	; 0x0c
    29d8:	ad 87       	std	Y+13, r26	; 0x0d
    29da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29de:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a e7       	ldi	r20, 0x7A	; 122
    29ea:	53 e4       	ldi	r21, 0x43	; 67
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8f 83       	std	Y+7, r24	; 0x07
    29f6:	98 87       	std	Y+8, r25	; 0x08
    29f8:	a9 87       	std	Y+9, r26	; 0x09
    29fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <HCLCD_Vid4Bits_Init+0x36c>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <HCLCD_Vid4Bits_Init+0x3ea>
	else if (__tmp > 65535)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <HCLCD_Vid4Bits_Init+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <HCLCD_Vid4Bits_Init+0x3cc>
    2a60:	89 e1       	ldi	r24, 0x19	; 25
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	8b 83       	std	Y+3, r24	; 0x03
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <HCLCD_Vid4Bits_Init+0x3ba>
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <HCLCD_Vid4Bits_Init+0x3ae>
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <HCLCD_Vid4Bits_Init+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <HCLCD_Vid4Bits_Init+0x3f6>
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET>>4);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET);
    2ab6:	86 e0       	ldi	r24, 0x06	; 6
    2ab8:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
}
    2abc:	e9 96       	adiw	r28, 0x39	; 57
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <HCLCD_VidWriteChar_4Bits>:
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	60 97       	sbiw	r28, 0x10	; 16
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	62 e0       	ldi	r22, 0x02	; 2
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Data*/
	LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
    2aee:	88 89       	ldd	r24, Y+16	; 0x10
    2af0:	8f 70       	andi	r24, 0x0F	; 15
    2af2:	88 0f       	add	r24, r24
    2af4:	88 0f       	add	r24, r24
    2af6:	88 0f       	add	r24, r24
    2af8:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyData);
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	62 e0       	ldi	r22, 0x02	; 2
    2afe:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b00:	0e 94 c5 0c 	call	0x198a	; 0x198a <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	62 e0       	ldi	r22, 0x02	; 2
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e4       	ldi	r27, 0x40	; 64
    2b16:	8b 87       	std	Y+11, r24	; 0x0b
    2b18:	9c 87       	std	Y+12, r25	; 0x0c
    2b1a:	ad 87       	std	Y+13, r26	; 0x0d
    2b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a e7       	ldi	r20, 0x7A	; 122
    2b2c:	53 e4       	ldi	r21, 0x43	; 67
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8f 83       	std	Y+7, r24	; 0x07
    2b38:	98 87       	std	Y+8, r25	; 0x08
    2b3a:	a9 87       	std	Y+9, r26	; 0x09
    2b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <HCLCD_VidWriteChar_4Bits+0x92>
		__ticks = 1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	3f c0       	rjmp	.+126    	; 0x2bde <HCLCD_VidWriteChar_4Bits+0x110>
	else if (__tmp > 65535)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	4c f5       	brge	.+82     	; 0x2bca <HCLCD_VidWriteChar_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	0f c0       	rjmp	.+30     	; 0x2bc0 <HCLCD_VidWriteChar_4Bits+0xf2>
    2ba2:	89 e1       	ldi	r24, 0x19	; 25
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <HCLCD_VidWriteChar_4Bits+0xe0>
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	69 f7       	brne	.-38     	; 0x2ba2 <HCLCD_VidWriteChar_4Bits+0xd4>
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <HCLCD_VidWriteChar_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <HCLCD_VidWriteChar_4Bits+0x11c>
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
}
    2bfc:	60 96       	adiw	r28, 0x10	; 16
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <HCLCD_VidSendChar_4Bits>:
void HCLCD_VidSendChar_4Bits(u8 Copy_u8Data)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	0f 92       	push	r0
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	82 95       	swap	r24
    2c1e:	8f 70       	andi	r24, 0x0F	; 15
    2c20:	0e 94 67 15 	call	0x2ace	; 0x2ace <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	0e 94 67 15 	call	0x2ace	; 0x2ace <HCLCD_VidWriteChar_4Bits>
}
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <HCLCD_VidWriteString_4Bits>:
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <HCLCD_VidWriteString_4Bits+0x6>
    2c38:	0f 92       	push	r0
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2c42:	19 82       	std	Y+1, r1	; 0x01
    2c44:	0e c0       	rjmp	.+28     	; 0x2c62 <HCLCD_VidWriteString_4Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c50:	fc 01       	movw	r30, r24
    2c52:	e2 0f       	add	r30, r18
    2c54:	f3 1f       	adc	r31, r19
    2c56:	80 81       	ld	r24, Z
    2c58:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <HCLCD_VidSendChar_4Bits>
		Loc_u8Count++;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
}
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 81       	ld	r24, Z
    2c74:	88 23       	and	r24, r24
    2c76:	39 f7       	brne	.-50     	; 0x2c46 <HCLCD_VidWriteString_4Bits+0x14>
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <HCLCD_VidWriteNumber_4Bits>:
void HCLCD_VidWriteNumber_4Bits(u32 Copy_u8Number)
{
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	60 97       	sbiw	r28, 0x10	; 16
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	6d 87       	std	Y+13, r22	; 0x0d
    2c9e:	7e 87       	std	Y+14, r23	; 0x0e
    2ca0:	8f 87       	std	Y+15, r24	; 0x0f
    2ca2:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2ca4:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	af 85       	ldd	r26, Y+15	; 0x0f
    2cac:	b8 89       	ldd	r27, Y+16	; 0x10
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	a1 05       	cpc	r26, r1
    2cb2:	b1 05       	cpc	r27, r1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <HCLCD_VidWriteNumber_4Bits+0x34>
    2cb6:	4f c0       	rjmp	.+158    	; 0x2d56 <HCLCD_VidWriteNumber_4Bits+0xd2>
    2cb8:	2d c0       	rjmp	.+90     	; 0x2d14 <HCLCD_VidWriteNumber_4Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	08 2f       	mov	r16, r24
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc4:	af 85       	ldd	r26, Y+15	; 0x0f
    2cc6:	b8 89       	ldd	r27, Y+16	; 0x10
    2cc8:	2a e0       	ldi	r18, 0x0A	; 10
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	bc 01       	movw	r22, r24
    2cd2:	cd 01       	movw	r24, r26
    2cd4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__udivmodsi4>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	28 2f       	mov	r18, r24
    2cde:	ce 01       	movw	r24, r28
    2ce0:	03 96       	adiw	r24, 0x03	; 3
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e0 0f       	add	r30, r16
    2ce6:	f1 1f       	adc	r31, r17
    2ce8:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	af 85       	ldd	r26, Y+15	; 0x0f
    2cf0:	b8 89       	ldd	r27, Y+16	; 0x10
    2cf2:	2a e0       	ldi	r18, 0x0A	; 10
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__udivmodsi4>
    2d02:	da 01       	movw	r26, r20
    2d04:	c9 01       	movw	r24, r18
    2d06:	8d 87       	std	Y+13, r24	; 0x0d
    2d08:	9e 87       	std	Y+14, r25	; 0x0e
    2d0a:	af 87       	std	Y+15, r26	; 0x0f
    2d0c:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	8f 5f       	subi	r24, 0xFF	; 255
    2d12:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d18:	af 85       	ldd	r26, Y+15	; 0x0f
    2d1a:	b8 89       	ldd	r27, Y+16	; 0x10
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	a1 05       	cpc	r26, r1
    2d20:	b1 05       	cpc	r27, r1
    2d22:	59 f6       	brne	.-106    	; 0x2cba <HCLCD_VidWriteNumber_4Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	81 50       	subi	r24, 0x01	; 1
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	11 c0       	rjmp	.+34     	; 0x2d4e <HCLCD_VidWriteNumber_4Bits+0xca>
		{
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	33 27       	eor	r19, r19
    2d32:	27 fd       	sbrc	r18, 7
    2d34:	30 95       	com	r19
    2d36:	ce 01       	movw	r24, r28
    2d38:	03 96       	adiw	r24, 0x03	; 3
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e2 0f       	add	r30, r18
    2d3e:	f3 1f       	adc	r31, r19
    2d40:	80 81       	ld	r24, Z
    2d42:	80 5d       	subi	r24, 0xD0	; 208
    2d44:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <HCLCD_VidSendChar_4Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	81 50       	subi	r24, 0x01	; 1
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	88 23       	and	r24, r24
    2d52:	64 f7       	brge	.-40     	; 0x2d2c <HCLCD_VidWriteNumber_4Bits+0xa8>
    2d54:	03 c0       	rjmp	.+6      	; 0x2d5c <HCLCD_VidWriteNumber_4Bits+0xd8>
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidSendChar_4Bits('0');
    2d56:	80 e3       	ldi	r24, 0x30	; 48
    2d58:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <HCLCD_VidSendChar_4Bits>
	}
}
    2d5c:	60 96       	adiw	r28, 0x10	; 16
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret

00002d72 <HCLCD_VidSetPosition_4BitsMode>:
void HCLCD_VidSetPosition_4BitsMode(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <HCLCD_VidSetPosition_4BitsMode+0x6>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	b9 f4       	brne	.+46     	; 0x2db4 <HCLCD_VidSetPosition_4BitsMode+0x42>
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	80 31       	cpi	r24, 0x10	; 16
    2d8a:	a0 f4       	brcc	.+40     	; 0x2db4 <HCLCD_VidSetPosition_4BitsMode+0x42>
	{
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	88 2f       	mov	r24, r24
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	80 58       	subi	r24, 0x80	; 128
    2d94:	9f 4f       	sbci	r25, 0xFF	; 255
    2d96:	95 95       	asr	r25
    2d98:	87 95       	ror	r24
    2d9a:	95 95       	asr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	95 95       	asr	r25
    2da0:	87 95       	ror	r24
    2da2:	95 95       	asr	r25
    2da4:	87 95       	ror	r24
    2da6:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	80 58       	subi	r24, 0x80	; 128
    2dae:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
    2db2:	19 c0       	rjmp	.+50     	; 0x2de6 <HCLCD_VidSetPosition_4BitsMode+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	b1 f4       	brne	.+44     	; 0x2de6 <HCLCD_VidSetPosition_4BitsMode+0x74>
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	80 31       	cpi	r24, 0x10	; 16
    2dbe:	98 f4       	brcc	.+38     	; 0x2de6 <HCLCD_VidSetPosition_4BitsMode+0x74>
	{
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	80 54       	subi	r24, 0x40	; 64
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	95 95       	asr	r25
    2dcc:	87 95       	ror	r24
    2dce:	95 95       	asr	r25
    2dd0:	87 95       	ror	r24
    2dd2:	95 95       	asr	r25
    2dd4:	87 95       	ror	r24
    2dd6:	95 95       	asr	r25
    2dd8:	87 95       	ror	r24
    2dda:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	80 54       	subi	r24, 0x40	; 64
    2de2:	0e 94 b9 12 	call	0x2572	; 0x2572 <HCLCD_VidWriteCommand_4Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <isr_tov_app>:
#include"HAL\HCLCD\HCLCD_Interface.h"
#include<util\delay.h>

volatile u8 flag=0;
void isr_tov_app(void)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
	if(flag)
    2df8:	80 91 69 00 	lds	r24, 0x0069
    2dfc:	88 23       	and	r24, r24
    2dfe:	61 f0       	breq	.+24     	; 0x2e18 <isr_tov_app+0x28>
	{
		flag=0;
    2e00:	10 92 69 00 	sts	0x0069, r1
		MDIO_Error_State_SetPinValue(PIN6,MDIO_PORTB,PIN_HIGH);
    2e04:	86 e0       	ldi	r24, 0x06	; 6
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
		TIMER1_VidSetCTCValueCHA(4999);
    2e0e:	87 e8       	ldi	r24, 0x87	; 135
    2e10:	93 e1       	ldi	r25, 0x13	; 19
    2e12:	0e 94 d0 06 	call	0xda0	; 0xda0 <TIMER1_VidSetCTCValueCHA>
    2e16:	0c c0       	rjmp	.+24     	; 0x2e30 <isr_tov_app+0x40>
	}
	else
	{
		flag=1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 69 00 	sts	0x0069, r24
		MDIO_Error_State_SetPinValue(PIN6,MDIO_PORTB,PIN_LOW);
    2e1e:	86 e0       	ldi	r24, 0x06	; 6
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_Error_State_SetPinValue>
		TIMER1_VidSetCTCValueCHA(14999);
    2e28:	87 e9       	ldi	r24, 0x97	; 151
    2e2a:	9a e3       	ldi	r25, 0x3A	; 58
    2e2c:	0e 94 d0 06 	call	0xda0	; 0xda0 <TIMER1_VidSetCTCValueCHA>
	}
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <main>:


int main(void)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62

	MDIO_Error_State_SetPinDirection(PIN6,MDIO_PORTB,PIN_OUTPUT);
    2e3e:	86 e0       	ldi	r24, 0x06	; 6
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	41 e0       	ldi	r20, 0x01	; 1
    2e44:	0e 94 8f 09 	call	0x131e	; 0x131e <MDIO_Error_State_SetPinDirection>

	TIMER1_VidCTC_SetCallBack(isr_tov_app);
    2e48:	88 ef       	ldi	r24, 0xF8	; 248
    2e4a:	96 e1       	ldi	r25, 0x16	; 22
    2e4c:	0e 94 0a 08 	call	0x1014	; 0x1014 <TIMER1_VidCTC_SetCallBack>
    TIMER1_VidSetCTCValueCHA(19998);
    2e50:	8e e1       	ldi	r24, 0x1E	; 30
    2e52:	9e e4       	ldi	r25, 0x4E	; 78
    2e54:	0e 94 d0 06 	call	0xda0	; 0xda0 <TIMER1_VidSetCTCValueCHA>
	TIMER1_VidInit();
    2e58:	0e 94 66 06 	call	0xccc	; 0xccc <TIMER1_VidInit>
	MGIE_VidEnable();
    2e5c:	0e 94 1c 08 	call	0x1038	; 0x1038 <MGIE_VidEnable>
    2e60:	ff cf       	rjmp	.-2      	; 0x2e60 <main+0x2a>

00002e62 <__udivmodhi4>:
    2e62:	aa 1b       	sub	r26, r26
    2e64:	bb 1b       	sub	r27, r27
    2e66:	51 e1       	ldi	r21, 0x11	; 17
    2e68:	07 c0       	rjmp	.+14     	; 0x2e78 <__udivmodhi4_ep>

00002e6a <__udivmodhi4_loop>:
    2e6a:	aa 1f       	adc	r26, r26
    2e6c:	bb 1f       	adc	r27, r27
    2e6e:	a6 17       	cp	r26, r22
    2e70:	b7 07       	cpc	r27, r23
    2e72:	10 f0       	brcs	.+4      	; 0x2e78 <__udivmodhi4_ep>
    2e74:	a6 1b       	sub	r26, r22
    2e76:	b7 0b       	sbc	r27, r23

00002e78 <__udivmodhi4_ep>:
    2e78:	88 1f       	adc	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	5a 95       	dec	r21
    2e7e:	a9 f7       	brne	.-22     	; 0x2e6a <__udivmodhi4_loop>
    2e80:	80 95       	com	r24
    2e82:	90 95       	com	r25
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	08 95       	ret

00002e8a <__udivmodsi4>:
    2e8a:	a1 e2       	ldi	r26, 0x21	; 33
    2e8c:	1a 2e       	mov	r1, r26
    2e8e:	aa 1b       	sub	r26, r26
    2e90:	bb 1b       	sub	r27, r27
    2e92:	fd 01       	movw	r30, r26
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <__udivmodsi4_ep>

00002e96 <__udivmodsi4_loop>:
    2e96:	aa 1f       	adc	r26, r26
    2e98:	bb 1f       	adc	r27, r27
    2e9a:	ee 1f       	adc	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	a2 17       	cp	r26, r18
    2ea0:	b3 07       	cpc	r27, r19
    2ea2:	e4 07       	cpc	r30, r20
    2ea4:	f5 07       	cpc	r31, r21
    2ea6:	20 f0       	brcs	.+8      	; 0x2eb0 <__udivmodsi4_ep>
    2ea8:	a2 1b       	sub	r26, r18
    2eaa:	b3 0b       	sbc	r27, r19
    2eac:	e4 0b       	sbc	r30, r20
    2eae:	f5 0b       	sbc	r31, r21

00002eb0 <__udivmodsi4_ep>:
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	1a 94       	dec	r1
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <__udivmodsi4_loop>
    2ebc:	60 95       	com	r22
    2ebe:	70 95       	com	r23
    2ec0:	80 95       	com	r24
    2ec2:	90 95       	com	r25
    2ec4:	9b 01       	movw	r18, r22
    2ec6:	ac 01       	movw	r20, r24
    2ec8:	bd 01       	movw	r22, r26
    2eca:	cf 01       	movw	r24, r30
    2ecc:	08 95       	ret

00002ece <__prologue_saves__>:
    2ece:	2f 92       	push	r2
    2ed0:	3f 92       	push	r3
    2ed2:	4f 92       	push	r4
    2ed4:	5f 92       	push	r5
    2ed6:	6f 92       	push	r6
    2ed8:	7f 92       	push	r7
    2eda:	8f 92       	push	r8
    2edc:	9f 92       	push	r9
    2ede:	af 92       	push	r10
    2ee0:	bf 92       	push	r11
    2ee2:	cf 92       	push	r12
    2ee4:	df 92       	push	r13
    2ee6:	ef 92       	push	r14
    2ee8:	ff 92       	push	r15
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	ca 1b       	sub	r28, r26
    2ef8:	db 0b       	sbc	r29, r27
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	09 94       	ijmp

00002f06 <__epilogue_restores__>:
    2f06:	2a 88       	ldd	r2, Y+18	; 0x12
    2f08:	39 88       	ldd	r3, Y+17	; 0x11
    2f0a:	48 88       	ldd	r4, Y+16	; 0x10
    2f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f18:	b9 84       	ldd	r11, Y+9	; 0x09
    2f1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f1c:	df 80       	ldd	r13, Y+7	; 0x07
    2f1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f20:	fd 80       	ldd	r15, Y+5	; 0x05
    2f22:	0c 81       	ldd	r16, Y+4	; 0x04
    2f24:	1b 81       	ldd	r17, Y+3	; 0x03
    2f26:	aa 81       	ldd	r26, Y+2	; 0x02
    2f28:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2a:	ce 0f       	add	r28, r30
    2f2c:	d1 1d       	adc	r29, r1
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	ed 01       	movw	r28, r26
    2f3a:	08 95       	ret

00002f3c <_exit>:
    2f3c:	f8 94       	cli

00002f3e <__stop_program>:
    2f3e:	ff cf       	rjmp	.-2      	; 0x2f3e <__stop_program>
